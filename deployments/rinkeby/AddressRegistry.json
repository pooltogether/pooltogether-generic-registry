{
  "address": "0x51471C324b5041BF53c7E5cAD7392f78c397E67b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "AddressAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "AddressRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressType",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_addressType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_previousContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x70bf2f1cf1e5e818ef6b731ed2a0fd789e70dc9a8d4d05713f5aa66ae8347496",
  "receipt": {
    "to": null,
    "from": "0x3F0556bCA55Bdbb78A9316936067a47fd4C4C4f4",
    "contractAddress": "0x51471C324b5041BF53c7E5cAD7392f78c397E67b",
    "transactionIndex": 10,
    "gasUsed": "793575",
    "logsBloom": "0x
    "blockHash": "0x183aa67d06777950ea7e713c476c31de24ec630974698d2a6638fb6b4bb38e22",
    "transactionHash": "0x70bf2f1cf1e5e818ef6b731ed2a0fd789e70dc9a8d4d05713f5aa66ae8347496",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 8482813,
        "transactionHash": "0x70bf2f1cf1e5e818ef6b731ed2a0fd789e70dc9a8d4d05713f5aa66ae8347496",
        "address": "0x51471C324b5041BF53c7E5cAD7392f78c397E67b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003f0556bca55bdbb78a9316936067a47fd4c4c4f4"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x183aa67d06777950ea7e713c476c31de24ec630974698d2a6638fb6b4bb38e22"
      }
    ],
    "blockNumber": 8482813,
    "cumulativeGasUsed": "3189742",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1d82de8daf219455917eefe334eb9bac",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"AddressRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_addressType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_previousContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAddresses(address[])\":{\"params\":{\"_addresses\":\"Array of contract addresses to be added\"}},\"getAddresses()\":{\"returns\":{\"_0\":\"Array of contract addresses\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAddress(address,address)\":{\"params\":{\"_address\":\"The address to remove from the linked list. \",\"_previousContract\":\"The address positionally located before the address that will be deleted. This may be the SENTINEL address if the list contains one contract address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAddresses(address[])\":{\"notice\":\"Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner.\"},\"addressType()\":{\"notice\":\"Storage field for what type of contract this Registry is storing \"},\"getAddresses()\":{\"notice\":\"Returns an array of all contract addresses in the linked list\"},\"initialize(string,address)\":{\"notice\":\"Initializer function\"},\"removeAddress(address,address)\":{\"notice\":\"Removes an address from the linked list. Can only be called by the Registry owner.\"}},\"notice\":\"A registry to hold Contract addresses.  Underlying data structure is a singly linked list. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AddressRegistry.sol\":\"AddressRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/AddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport \\\"./utils/MappedSinglyLinkedList.sol\\\";\\n\\n///@notice A registry to hold Contract addresses.  Underlying data structure is a singly linked list. \\ncontract AddressRegistry is Ownable, Initializable {\\n\\n    using MappedSinglyLinkedList for MappedSinglyLinkedList.Mapping;\\n\\n    event AddressAdded(address indexed _address);\\n    event AddressRemoved(address indexed _address);\\n\\n    MappedSinglyLinkedList.Mapping internal addressList;\\n\\n    /// @notice Storage field for what type of contract this Registry is storing \\n    string public addressType;    \\n    \\n    /// @notice Initializer function\\n    function initialize(string calldata _addressType, address _owner) external initializer {\\n        addressType = _addressType;\\n        addressList.initialize();\\n        transferOwnership(_owner);\\n    }\\n\\n\\n    /// @notice Returns an array of all contract addresses in the linked list\\n    /// @return Array of contract addresses\\n    function getAddresses() view external returns(address[] memory) {\\n        return addressList.addressArray();\\n    } \\n\\n    /// @notice Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner.\\n    /// @param _addresses Array of contract addresses to be added\\n    function addAddresses(address[] calldata _addresses) public onlyOwner {\\n        for(uint256 _address = 0; _address < _addresses.length; _address++ ){\\n            addressList.addAddress(_addresses[_address]);\\n            emit AddressAdded(_addresses[_address]);\\n        }\\n    }\\n\\n    /// @notice Removes an address from the linked list. Can only be called by the Registry owner.\\n    /// @param _previousContract The address positionally located before the address that will be deleted. This may be the SENTINEL address if the list contains one contract address\\n    /// @param _address The address to remove from the linked list. \\n    function removeAddress(address _previousContract, address _address) public onlyOwner {\\n        addressList.removeAddress(_previousContract, _address); \\n        emit AddressRemoved(_address);\\n    } \\n}\",\"keccak256\":\"0xeb5c44ce5f128cedd6db262ac442942ee9ac3e278491cc16e9fb7cbc1f7ac13e\",\"license\":\"MIT\"},\"contracts/utils/MappedSinglyLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.7.6;\\n\\n/// @notice An efficient implementation of a singly linked list of addresses\\n/// @dev A mapping(address => address) tracks the 'next' pointer.  A special address called the SENTINEL is used to denote the beginning and end of the list.\\nlibrary MappedSinglyLinkedList {\\n\\n  /// @notice The special value address used to denote the end of the list\\n  address public constant SENTINEL = address(0x1);\\n\\n  /// @notice The data structure to use for the list.\\n  struct Mapping {\\n    uint256 count;\\n\\n    mapping(address => address) addressMap;\\n  }\\n\\n  /// @notice Initializes the list.\\n  /// @dev It is important that this is called so that the SENTINEL is correctly setup.\\n  function initialize(Mapping storage self) internal {\\n    require(self.count == 0, \\\"Already init\\\");\\n    self.addressMap[SENTINEL] = SENTINEL;\\n  }\\n\\n  function start(Mapping storage self) internal view returns (address) {\\n    return self.addressMap[SENTINEL];\\n  }\\n\\n  function next(Mapping storage self, address current) internal view returns (address) {\\n    return self.addressMap[current];\\n  }\\n\\n  function end(Mapping storage) internal pure returns (address) {\\n    return SENTINEL;\\n  }\\n\\n  function addAddresses(Mapping storage self, address[] memory addresses) internal {\\n    for (uint256 i = 0; i < addresses.length; i++) {\\n      addAddress(self, addresses[i]);\\n    }\\n  }\\n\\n  /// @notice Adds an address to the front of the list.\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param newAddress The address to shift to the front of the list\\n  function addAddress(Mapping storage self, address newAddress) internal {\\n    require(newAddress != SENTINEL && newAddress != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[newAddress] == address(0), \\\"Already added\\\");\\n    self.addressMap[newAddress] = self.addressMap[SENTINEL];\\n    self.addressMap[SENTINEL] = newAddress;\\n    self.count = self.count + 1;\\n  }\\n\\n  /// @notice Removes an address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param prevAddress The address that precedes the address to be removed.  This may be the SENTINEL if at the start.\\n  /// @param addr The address to remove from the list.\\n  function removeAddress(Mapping storage self, address prevAddress, address addr) internal {\\n    require(addr != SENTINEL && addr != address(0), \\\"Invalid address\\\");\\n    require(self.addressMap[prevAddress] == addr, \\\"Invalid prevAddress\\\");\\n    self.addressMap[prevAddress] = self.addressMap[addr];\\n    delete self.addressMap[addr];\\n    self.count = self.count - 1;\\n  }\\n\\n  /// @notice Determines whether the list contains the given address\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @param addr The address to check\\n  /// @return True if the address is contained, false otherwise.\\n  function contains(Mapping storage self, address addr) internal view returns (bool) {\\n    return addr != SENTINEL && addr != address(0) && self.addressMap[addr] != address(0);\\n  }\\n\\n  /// @notice Returns an address array of all the addresses in this list\\n  /// @dev Contains a for loop, so complexity is O(n) wrt the list size\\n  /// @param self The Mapping struct that this function is attached to\\n  /// @return An array of all the addresses\\n  function addressArray(Mapping storage self) internal view returns (address[] memory) {\\n    address[] memory array = new address[](self.count);\\n    uint256 count;\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      array[count] = currentAddress;\\n      currentAddress = self.addressMap[currentAddress];\\n      count++;\\n    }\\n    return array;\\n  }\\n\\n  /// @notice Removes every address from the list\\n  /// @param self The Mapping struct that this function is attached to\\n  function clearAll(Mapping storage self) internal {\\n    address currentAddress = self.addressMap[SENTINEL];\\n    while (currentAddress != address(0) && currentAddress != SENTINEL) {\\n      address nextAddress = self.addressMap[currentAddress];\\n      delete self.addressMap[currentAddress];\\n      currentAddress = nextAddress;\\n    }\\n    self.addressMap[SENTINEL] = SENTINEL;\\n    self.count = 0;\\n  }\\n}\\n\",\"keccak256\":\"0x14a99407202bafc5988b8ea002afabac73c13f88372083cf381d447ef30edc85\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600061001b61006a565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35061006e565b3390565b610cef8061007d6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100db578063a39fac12146100f0578063b6fac15a14610105578063f2fde38b1461011857610088565b80633628731c1461008d578063506cd107146100a2578063715018a6146100c05780637ab4339d146100c8575b600080fd5b6100a061009b366004610aa6565b61012b565b005b6100aa610227565b6040516100b79190610bf2565b60405180910390f35b6100a06102b5565b6100a06100d6366004610b15565b610361565b6100e361043d565b6040516100b79190610b91565b6100f861044c565b6040516100b79190610ba5565b6100a0610113366004610a74565b61045d565b6100a0610126366004610a53565b610503565b610133610605565b6001600160a01b031661014461043d565b6001600160a01b03161461018d576040805162461bcd60e51b81526020600482018190526024820152600080516020610c9a833981519152604482015290519081900360640190fd5b60005b81811015610222576101c48383838181106101a757fe5b90506020020160208101906101bc9190610a53565b600190610609565b8282828181106101d057fe5b90506020020160208101906101e59190610a53565b6001600160a01b03167fa226db3f664042183ee0281230bba26cbf7b5057e50aee7f25a175ff45ce4d7f60405160405180910390a2600101610190565b505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b505050505081565b6102bd610605565b6001600160a01b03166102ce61043d565b6001600160a01b031614610317576040805162461bcd60e51b81526020600482018190526024820152600080516020610c9a833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600054600160a81b900460ff168061037c575061037c61071d565b806103915750600054600160a01b900460ff16155b6103cc5760405162461bcd60e51b815260040180806020018281038252602e815260200180610c6c602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015610403576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b61040f6003858561099b565b5061041a600161072e565b61042382610503565b8015610437576000805460ff60a81b191690555b50505050565b6000546001600160a01b031690565b60606104586001610796565b905090565b610465610605565b6001600160a01b031661047661043d565b6001600160a01b0316146104bf576040805162461bcd60e51b81526020600482018190526024820152600080516020610c9a833981519152604482015290519081900360640190fd5b6104cb60018383610879565b6040516001600160a01b038216907f24a12366c02e13fe4a9e03d86a8952e85bb74a456c16e4a18b6d8295700b74bb90600090a25050565b61050b610605565b6001600160a01b031661051c61043d565b6001600160a01b031614610565576040805162461bcd60e51b81526020600482018190526024820152600080516020610c9a833981519152604482015290519081900360640190fd5b6001600160a01b0381166105aa5760405162461bcd60e51b8152600401808060200182810382526026815260200180610c466026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b03811660011480159061062b57506001600160a01b03811615155b61066e576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b03818116600090815260018401602052604090205416156106cd576040805162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b604482015290519081900360640190fd5b60016000818152838201602052604080822080546001600160a01b039586168085529284208054969091166001600160a01b03199687161790559183905281549093169092179091558154019055565b600061072830610995565b15905090565b805415610771576040805162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481a5b9a5d60a21b604482015290519081900360640190fd5b60016000818152918101602052604090912080546001600160a01b0319169091179055565b60606000826000015467ffffffffffffffff811180156107b557600080fd5b506040519080825280602002602001820160405280156107df578160200160208202803683370190505b50600160008181529085016020526040812054919250906001600160a01b03165b6001600160a01b0381161580159061082257506001600160a01b038116600114155b1561086e578083838151811061083457fe5b6001600160a01b03928316602091820292909201810191909152918116600090815260018088019093526040902054929091019116610800565b50909150505b919050565b6001600160a01b03811660011480159061089b57506001600160a01b03811615155b6108de576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b038281166000908152600185016020526040902054811690821614610947576040805162461bcd60e51b8152602060048201526013602482015272496e76616c696420707265764164647265737360681b604482015290519081900360640190fd5b6001600160a01b039081166000818152600185016020526040808220805495851683529082208054959094166001600160a01b03199586161790935552805490911690558054600019019055565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826109d15760008555610a17565b82601f106109ea5782800160ff19823516178555610a17565b82800160010185558215610a17579182015b82811115610a175782358255916020019190600101906109fc565b50610a23929150610a27565b5090565b5b80821115610a235760008155600101610a28565b80356001600160a01b038116811461087457600080fd5b600060208284031215610a64578081fd5b610a6d82610a3c565b9392505050565b60008060408385031215610a86578081fd5b610a8f83610a3c565b9150610a9d60208401610a3c565b90509250929050565b60008060208385031215610ab8578182fd5b823567ffffffffffffffff80821115610acf578384fd5b818501915085601f830112610ae2578384fd5b813581811115610af0578485fd5b8660208083028501011115610b03578485fd5b60209290920196919550909350505050565b600080600060408486031215610b29578081fd5b833567ffffffffffffffff80821115610b40578283fd5b818601915086601f830112610b53578283fd5b813581811115610b61578384fd5b876020828501011115610b72578384fd5b602092830195509350610b889186019050610a3c565b90509250925092565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610be65783516001600160a01b031683529284019291840191600101610bc1565b50909695505050505050565b6000602080835283518082850152825b81811015610c1e57858101830151858201604001528201610c02565b81811115610c2f5783604083870101525b50601f01601f191692909201604001939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200159bd01396a5ba625c86a24e45941aa75881e5637ff73a95ce33cc42c976fc864736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100db578063a39fac12146100f0578063b6fac15a14610105578063f2fde38b1461011857610088565b80633628731c1461008d578063506cd107146100a2578063715018a6146100c05780637ab4339d146100c8575b600080fd5b6100a061009b366004610aa6565b61012b565b005b6100aa610227565b6040516100b79190610bf2565b60405180910390f35b6100a06102b5565b6100a06100d6366004610b15565b610361565b6100e361043d565b6040516100b79190610b91565b6100f861044c565b6040516100b79190610ba5565b6100a0610113366004610a74565b61045d565b6100a0610126366004610a53565b610503565b610133610605565b6001600160a01b031661014461043d565b6001600160a01b03161461018d576040805162461bcd60e51b81526020600482018190526024820152600080516020610c9a833981519152604482015290519081900360640190fd5b60005b81811015610222576101c48383838181106101a757fe5b90506020020160208101906101bc9190610a53565b600190610609565b8282828181106101d057fe5b90506020020160208101906101e59190610a53565b6001600160a01b03167fa226db3f664042183ee0281230bba26cbf7b5057e50aee7f25a175ff45ce4d7f60405160405180910390a2600101610190565b505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ad5780601f10610282576101008083540402835291602001916102ad565b820191906000526020600020905b81548152906001019060200180831161029057829003601f168201915b505050505081565b6102bd610605565b6001600160a01b03166102ce61043d565b6001600160a01b031614610317576040805162461bcd60e51b81526020600482018190526024820152600080516020610c9a833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600054600160a81b900460ff168061037c575061037c61071d565b806103915750600054600160a01b900460ff16155b6103cc5760405162461bcd60e51b815260040180806020018281038252602e815260200180610c6c602e913960400191505060405180910390fd5b600054600160a81b900460ff16158015610403576000805460ff60a01b1960ff60a81b19909116600160a81b1716600160a01b1790555b61040f6003858561099b565b5061041a600161072e565b61042382610503565b8015610437576000805460ff60a81b191690555b50505050565b6000546001600160a01b031690565b60606104586001610796565b905090565b610465610605565b6001600160a01b031661047661043d565b6001600160a01b0316146104bf576040805162461bcd60e51b81526020600482018190526024820152600080516020610c9a833981519152604482015290519081900360640190fd5b6104cb60018383610879565b6040516001600160a01b038216907f24a12366c02e13fe4a9e03d86a8952e85bb74a456c16e4a18b6d8295700b74bb90600090a25050565b61050b610605565b6001600160a01b031661051c61043d565b6001600160a01b031614610565576040805162461bcd60e51b81526020600482018190526024820152600080516020610c9a833981519152604482015290519081900360640190fd5b6001600160a01b0381166105aa5760405162461bcd60e51b8152600401808060200182810382526026815260200180610c466026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6001600160a01b03811660011480159061062b57506001600160a01b03811615155b61066e576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b03818116600090815260018401602052604090205416156106cd576040805162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481859191959609a1b604482015290519081900360640190fd5b60016000818152838201602052604080822080546001600160a01b039586168085529284208054969091166001600160a01b03199687161790559183905281549093169092179091558154019055565b600061072830610995565b15905090565b805415610771576040805162461bcd60e51b815260206004820152600c60248201526b105b1c9958591e481a5b9a5d60a21b604482015290519081900360640190fd5b60016000818152918101602052604090912080546001600160a01b0319169091179055565b60606000826000015467ffffffffffffffff811180156107b557600080fd5b506040519080825280602002602001820160405280156107df578160200160208202803683370190505b50600160008181529085016020526040812054919250906001600160a01b03165b6001600160a01b0381161580159061082257506001600160a01b038116600114155b1561086e578083838151811061083457fe5b6001600160a01b03928316602091820292909201810191909152918116600090815260018088019093526040902054929091019116610800565b50909150505b919050565b6001600160a01b03811660011480159061089b57506001600160a01b03811615155b6108de576040805162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b038281166000908152600185016020526040902054811690821614610947576040805162461bcd60e51b8152602060048201526013602482015272496e76616c696420707265764164647265737360681b604482015290519081900360640190fd5b6001600160a01b039081166000818152600185016020526040808220805495851683529082208054959094166001600160a01b03199586161790935552805490911690558054600019019055565b3b151590565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826109d15760008555610a17565b82601f106109ea5782800160ff19823516178555610a17565b82800160010185558215610a17579182015b82811115610a175782358255916020019190600101906109fc565b50610a23929150610a27565b5090565b5b80821115610a235760008155600101610a28565b80356001600160a01b038116811461087457600080fd5b600060208284031215610a64578081fd5b610a6d82610a3c565b9392505050565b60008060408385031215610a86578081fd5b610a8f83610a3c565b9150610a9d60208401610a3c565b90509250929050565b60008060208385031215610ab8578182fd5b823567ffffffffffffffff80821115610acf578384fd5b818501915085601f830112610ae2578384fd5b813581811115610af0578485fd5b8660208083028501011115610b03578485fd5b60209290920196919550909350505050565b600080600060408486031215610b29578081fd5b833567ffffffffffffffff80821115610b40578283fd5b818601915086601f830112610b53578283fd5b813581811115610b61578384fd5b876020828501011115610b72578384fd5b602092830195509350610b889186019050610a3c565b90509250925092565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b81811015610be65783516001600160a01b031683529284019291840191600101610bc1565b50909695505050505050565b6000602080835283518082850152825b81811015610c1e57858101830151858201604001528201610c02565b81811115610c2f5783604083870101525b50601f01601f191692909201604001939250505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a26469706673582212200159bd01396a5ba625c86a24e45941aa75881e5637ff73a95ce33cc42c976fc864736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAddresses(address[])": {
        "params": {
          "_addresses": "Array of contract addresses to be added"
        }
      },
      "getAddresses()": {
        "returns": {
          "_0": "Array of contract addresses"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAddress(address,address)": {
        "params": {
          "_address": "The address to remove from the linked list. ",
          "_previousContract": "The address positionally located before the address that will be deleted. This may be the SENTINEL address if the list contains one contract address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAddresses(address[])": {
        "notice": "Adds addresses to the linked list. Will revert if the address is already in the list.  Can only be called by the Registry owner."
      },
      "addressType()": {
        "notice": "Storage field for what type of contract this Registry is storing "
      },
      "getAddresses()": {
        "notice": "Returns an array of all contract addresses in the linked list"
      },
      "initialize(string,address)": {
        "notice": "Initializer function"
      },
      "removeAddress(address,address)": {
        "notice": "Removes an address from the linked list. Can only be called by the Registry owner."
      }
    },
    "notice": "A registry to hold Contract addresses.  Underlying data structure is a singly linked list. ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3022,
        "contract": "contracts/AddressRegistry.sol:AddressRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1308,
        "contract": "contracts/AddressRegistry.sol:AddressRegistry",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1311,
        "contract": "contracts/AddressRegistry.sol:AddressRegistry",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3515,
        "contract": "contracts/AddressRegistry.sol:AddressRegistry",
        "label": "addressList",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Mapping)3722_storage"
      },
      {
        "astId": 3518,
        "contract": "contracts/AddressRegistry.sol:AddressRegistry",
        "label": "addressType",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Mapping)3722_storage": {
        "encoding": "inplace",
        "label": "struct MappedSinglyLinkedList.Mapping",
        "members": [
          {
            "astId": 3717,
            "contract": "contracts/AddressRegistry.sol:AddressRegistry",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3721,
            "contract": "contracts/AddressRegistry.sol:AddressRegistry",
            "label": "addressMap",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_address)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}